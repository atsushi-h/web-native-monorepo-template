# Based on ai-coding-project-boilerplate by Shinsuke Kagawa
# https://github.com/shinpr/ai-coding-project-boilerplate

# 各ルールファイルのメタデータ
# 各ルールの概要、タグ、典型的な使用場面、サイズを管理

rules:
  typescript:
    file: "typescript.md"
    tags: [implementation, type-safety, async, refactoring, coding-style]
    typical-use: "TypeScriptコードの作成・修正・リファクタリング"
    size: medium
    key-references:
      - "YAGNI原則 - Kent Beck"
      - "Clean Code - Robert C. Martin"
      - "DRY原則 - The Pragmatic Programmer"
      - "Refactoring - Martin Fowler"
    sections:
      - "基本原則"
      - "コメント記述ルール"
      - "型安全性"
      - "コーディング規約"
      - "エラーハンドリング"
      - "リファクタリング手法"
      - "パフォーマンス最適化"

  typescript-testing:
    file: "typescript-testing.md"
    tags: [quality, testing, tdd, coverage, vitest, implementation, debugging, refactoring]
    typical-use: "テスト作成、TDD実践、品質チェック、実装・修正時のテストファースト"
    size: medium
    key-references:
      - "Test-Driven Development - Kent Beck"
      - "Rule of Three - Martin Fowler"
      - "Red-Green-Refactor - Kent Beck"
      - "AAAパターン - Arrange-Act-Assert"
    sections:
      - "テストフレームワーク"
      - "テストの基本方針"
      - "テストの設計原則"
      - "テストヘルパーの活用ルール"
      - "テストの実装規約"
      - "Vitestの基本例"

  ai-development-guide:
    file: "ai-development-guide.md"
    tags: [anti-patterns, technical-judgment, debugging, quality-commands, rule-of-three, implementation, type-safety, refactoring]
    typical-use: "技術的判断基準、アンチパターン検出、デバッグ手法、品質チェックコマンド、実装時の失敗回避"
    size: medium
    key-references:
      - "Rule of Three - Martin Fowler"
      - "5 Whys - トヨタ生産方式"
      - "DRY原則 - The Pragmatic Programmer"
      - "単一責任原則（SRP） - Clean Code"
      - "YAGNI原則 - Extreme Programming"
    sections:
      - "技術的アンチパターン（赤信号パターン）"
      - "Rule of Three - コード重複の判断基準"
      - "よくある失敗パターンと回避方法"
      - "デバッグ手法"
      - "品質チェックコマンドリファレンス"
      - "技術的判断が必要な場面"
      - "継続的改善のマインドセット"

  technical-spec:
    file: "technical-spec.md"
    tags: [architecture, design, documentation, environment, data-flow, implementation]
    typical-use: "技術設計、環境設定、ドキュメント作成プロセス、実装方針決定"
    size: medium
    key-references:
      - "ADRフォーマット - Michael Nygard"
      - "単一データソース原則 - Single Source of Truth"
      - "依存性注入（DI） - Martin Fowler"
    sections:
      - "技術スタックの基本方針"
      - "環境変数管理とセキュリティ"
      - "アーキテクチャ設計"
      - "依存性注入（DI）パターン"
      - "設計ドキュメントとプロセス"
      - "ビルドとテスト"

  project-context:
    file: "project-context.md"
    tags: [context, project-specific, implementation]
    typical-use: "プロジェクト固有情報、実装原則の理解"
    size: small
    key-references:
      - "プロジェクト固有（経験則）"
    sections:
      - "基本設定"
      - "実装原則"
      - "カスタマイズガイド"

  sub-agents:
    file: "sub-agents.md"
    tags: [orchestration, process, sub-agents, requirement-analysis, planning, quality, documentation]
    typical-use: "サブエージェント活用、タスクオーケストレーション、新機能開発、品質保証"
    size: large
    key-references:
      - "オーケストレーションパターン - エンタープライズアーキテクチャ"
      - "責務分離原則 - Clean Architecture"
      - "規模判定手法 - プロジェクト管理実務"
    sections:
      - "私の基本的な立ち位置"
      - "タスク受領時の判断フロー"
      - "私が活用できるサブエージェント"
      - "私のオーケストレーション原則"
      - "規模判定の解釈基準"
      - "作業計画時の私の基本フロー"
      - "自律実行モード"
      - "人間との必須対話ポイント"

  architecture-decision-process:
    file: "architecture-decision-process.md"
    tags: [architecture, decision-making, adr, process, large-scale]
    typical-use: "大規模変更、アーキテクチャ決定、ADR作成"
    size: medium
    key-references:
      - "ADR手法 - Michael Nygard"
      - "Documenting Architecture Decisions"
      - "Design Doc文化 - Google Engineering Practices"
      - "トレードオフ分析 - Software Architecture in Practice"
    sections:
      - "目的"
      - "ADR作成が必要なケース"
      - "ADR作成プロセス"
      - "ADRステータス"
      - "ADRとDesign Docの使い分け"
      - "AI利用時のルール"
